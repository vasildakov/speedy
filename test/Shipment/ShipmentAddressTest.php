<?php
declare(strict_types=1);

namespace VasilDakov\SpeedyTest\Shipment;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use VasilDakov\Speedy\Shipment\ShipmentAddress;
use VasilDakov\Speedy\ValueObject\CountryCode;

/**
 * Class ShipmentAddressTest
 *
 * @author Valentin Valkanov <valentinvalkanof@gmail.com>
 * @copyright
 * @version
 */
class ShipmentAddressTest extends TestCase
{
    /**
     * @var CountryCode
     */
    protected CountryCode $countryId;

    /**
     * @var string
     */
    protected string $stateId;

    /**
     * @var int
     */
    protected int $siteId;

    /**
     * @var string
     */
    protected string $siteType;

    /**
     * @var string
     */
    protected string $siteName;

    /**
     * @var string
     */
    protected string $postCode;

    /**
     * @var int
     */
    protected int $streetId;

    /**
     * @var string
     */
    protected string $streetType;

    /**
     * @var string
     */
    protected string $streetName;

    /**
     * @var string
     */
    protected string $streetNo;

    /**
     * @var int
     */
    protected int $complexId;

    /**
     * @var string
     */
    protected string $complexType;

    /**
     * @var string
     */
    protected string $complexName;

    /**
     * @var string
     */
    protected string $blockNo;

    /**
     * @var string
     */
    protected string $entranceNo;

    /**
     * @var string
     */
    protected string $floorNo;

    /**
     * @var string
     */
    protected string $apartmentNo;

    /**
     * @var int
     */
    protected int $poiId;

    /**
     * @var string
     */
    protected string $addressNote;

    /**
     * @var string
     */
    protected string $addressLine1;

    /**
     * @var string
     */
    protected string $addressLine2;

    /**
     * @var float
     */
    protected float $x;

    /**
     * @var float
     */
    protected float $y;

    /**
     * @return void
     */
    protected function setUp(): void
    {
        $this->countryId = $this->createMock(CountryCode::class);
        $this->stateId   = 'StateId';
        $this->siteId = 100;
        $this->siteType = 'SiteType';
        $this->siteName  = 'SiteName';
        $this->postCode  = '1000';
        $this->streetId = 5;
        $this->streetType = 'StreetType';
        $this->streetName = 'StreetName';
        $this->streetNo = 'StreetNo';
        $this->complexId = 123;
        $this->complexType = 'ComplexType';
        $this->complexName = 'ComplexName';
        $this->blockNo = 'BlockNo';
        $this->entranceNo = 'EntranceNo';
        $this->floorNo = 'FloorNo';
        $this->apartmentNo = 'ApartmentNo';
        $this->poiId = 789;
        $this->addressNote = 'AddressNote';
        $this->addressLine1 = 'AddressLine1';
        $this->addressLine2 = 'AddressLine2';
        $this->x = 3.14;
        $this->y = 1.618;

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     */
    public function testItCanBeCreated(): void
    {
        $object = new ShipmentAddress($this->siteId);

        $this->assertInstanceOf(ShipmentAddress::class, $object);
    }

    /**
     * @return void
     * @group ShipmentAddress
     */
    public function testItCanRetrieveTheStateId(): void
    {
        $object = new ShipmentAddress($this->siteId);

        $object->setStateId($this->stateId);

        $this->assertEquals($this->stateId, $object->getStateId());
    }

    /**
     * @return void
     * @group ShipmentAddress
     */
    public function testItCanRetrieveTheSiteId(): void
    {
        $object = new ShipmentAddress($this->siteId);

        $this->assertEquals($this->siteId, $object->getSiteId());
    }

    /**
     * @return void
     * @group ShipmentAddress
     */
    public function testItCanRetrieveTheCountryId(): void
    {
        $object = new ShipmentAddress($this->siteId);

        $this->assertEquals($this->countryId, $object->getCountryId());
    }

    public function testItCanRetrieveTheSiteType(): void
    {
        $object = new ShipmentAddress($this->siteId);

        $this->assertEquals($this->siteType, $object->getSiteType());
    }
}
